// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `audioSceneHandlerData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.vec3)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vec3 {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.vec3.x)
    pub x: f32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.vec3.y)
    pub y: f32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.vec3.z)
    pub z: f32,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.vec3.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vec3 {
    fn default() -> &'a Vec3 {
        <Vec3 as ::protobuf::Message>::default_instance()
    }
}

impl Vec3 {
    pub fn new() -> Vec3 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Vec3| { &m.x },
            |m: &mut Vec3| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Vec3| { &m.y },
            |m: &mut Vec3| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "z",
            |m: &Vec3| { &m.z },
            |m: &mut Vec3| { &mut m.z },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vec3>(
            "vec3",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vec3 {
    const NAME: &'static str = "vec3";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.x = is.read_float()?;
                },
                21 => {
                    self.y = is.read_float()?;
                },
                29 => {
                    self.z = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 4;
        }
        if self.y != 0. {
            my_size += 1 + 4;
        }
        if self.z != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.z != 0. {
            os.write_float(3, self.z)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vec3 {
        Vec3::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vec3 {
        static instance: Vec3 = Vec3 {
            x: 0.,
            y: 0.,
            z: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vec3 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("vec3").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vec3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vec3 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.vec4)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vec4 {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.vec4.x)
    pub x: f32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.vec4.y)
    pub y: f32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.vec4.z)
    pub z: f32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.vec4.w)
    pub w: f32,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.vec4.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vec4 {
    fn default() -> &'a Vec4 {
        <Vec4 as ::protobuf::Message>::default_instance()
    }
}

impl Vec4 {
    pub fn new() -> Vec4 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Vec4| { &m.x },
            |m: &mut Vec4| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Vec4| { &m.y },
            |m: &mut Vec4| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "z",
            |m: &Vec4| { &m.z },
            |m: &mut Vec4| { &mut m.z },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "w",
            |m: &Vec4| { &m.w },
            |m: &mut Vec4| { &mut m.w },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vec4>(
            "vec4",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vec4 {
    const NAME: &'static str = "vec4";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.x = is.read_float()?;
                },
                21 => {
                    self.y = is.read_float()?;
                },
                29 => {
                    self.z = is.read_float()?;
                },
                37 => {
                    self.w = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 4;
        }
        if self.y != 0. {
            my_size += 1 + 4;
        }
        if self.z != 0. {
            my_size += 1 + 4;
        }
        if self.w != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_float(1, self.x)?;
        }
        if self.y != 0. {
            os.write_float(2, self.y)?;
        }
        if self.z != 0. {
            os.write_float(3, self.z)?;
        }
        if self.w != 0. {
            os.write_float(4, self.w)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vec4 {
        Vec4::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.w = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vec4 {
        static instance: Vec4 = Vec4 {
            x: 0.,
            y: 0.,
            z: 0.,
            w: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vec4 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("vec4").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vec4 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vec4 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.transform)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Transform {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.transform.position)
    pub position: ::protobuf::MessageField<Vec3>,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.transform.orientation)
    pub orientation: ::protobuf::MessageField<Vec4>,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.transform.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transform {
    fn default() -> &'a Transform {
        <Transform as ::protobuf::Message>::default_instance()
    }
}

impl Transform {
    pub fn new() -> Transform {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vec3>(
            "position",
            |m: &Transform| { &m.position },
            |m: &mut Transform| { &mut m.position },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Vec4>(
            "orientation",
            |m: &Transform| { &m.orientation },
            |m: &mut Transform| { &mut m.orientation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transform>(
            "transform",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transform {
    const NAME: &'static str = "transform";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.position)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.orientation)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.orientation.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.position.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.orientation.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transform {
        Transform::new()
    }

    fn clear(&mut self) {
        self.position.clear();
        self.orientation.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transform {
        static instance: Transform = Transform {
            position: ::protobuf::MessageField::none(),
            orientation: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transform {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("transform").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transform {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.listener)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Listener {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.listener.transform)
    pub transform: ::protobuf::MessageField<Transform>,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.listener.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Listener {
    fn default() -> &'a Listener {
        <Listener as ::protobuf::Message>::default_instance()
    }
}

impl Listener {
    pub fn new() -> Listener {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Transform>(
            "transform",
            |m: &Listener| { &m.transform },
            |m: &mut Listener| { &mut m.transform },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Listener>(
            "listener",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Listener {
    const NAME: &'static str = "listener";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transform)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.transform.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.transform.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Listener {
        Listener::new()
    }

    fn clear(&mut self) {
        self.transform.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Listener {
        static instance: Listener = Listener {
            transform: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Listener {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("listener").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Listener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listener {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.source_transform)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Source_transform {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.source_transform.id)
    pub id: u32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.source_transform.transform)
    pub transform: ::protobuf::MessageField<Transform>,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.source_transform.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Source_transform {
    fn default() -> &'a Source_transform {
        <Source_transform as ::protobuf::Message>::default_instance()
    }
}

impl Source_transform {
    pub fn new() -> Source_transform {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Source_transform| { &m.id },
            |m: &mut Source_transform| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Transform>(
            "transform",
            |m: &Source_transform| { &m.transform },
            |m: &mut Source_transform| { &mut m.transform },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Source_transform>(
            "source_transform",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Source_transform {
    const NAME: &'static str = "source_transform";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                256 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transform)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(32, self.id);
        }
        if let Some(v) = self.transform.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(32, self.id)?;
        }
        if let Some(v) = self.transform.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Source_transform {
        Source_transform::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.transform.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Source_transform {
        static instance: Source_transform = Source_transform {
            id: 0,
            transform: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Source_transform {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("source_transform").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Source_transform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Source_transform {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.sources)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Sources {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.sources.transforms)
    pub transforms: ::std::vec::Vec<Transform>,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.sources.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sources {
    fn default() -> &'a Sources {
        <Sources as ::protobuf::Message>::default_instance()
    }
}

impl Sources {
    pub fn new() -> Sources {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transforms",
            |m: &Sources| { &m.transforms },
            |m: &mut Sources| { &mut m.transforms },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sources>(
            "sources",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sources {
    const NAME: &'static str = "sources";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transforms.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.transforms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.transforms {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sources {
        Sources::new()
    }

    fn clear(&mut self) {
        self.transforms.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sources {
        static instance: Sources = Sources {
            transforms: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sources {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("sources").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sources {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sources {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.room_data)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Room_data {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.room_data.length)
    pub length: f32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.room_data.height)
    pub height: f32,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.room_data.width)
    pub width: f32,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.room_data.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Room_data {
    fn default() -> &'a Room_data {
        <Room_data as ::protobuf::Message>::default_instance()
    }
}

impl Room_data {
    pub fn new() -> Room_data {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &Room_data| { &m.length },
            |m: &mut Room_data| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &Room_data| { &m.height },
            |m: &mut Room_data| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &Room_data| { &m.width },
            |m: &mut Room_data| { &mut m.width },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Room_data>(
            "room_data",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Room_data {
    const NAME: &'static str = "room_data";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                13 => {
                    self.length = is.read_float()?;
                },
                21 => {
                    self.height = is.read_float()?;
                },
                29 => {
                    self.width = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.length != 0. {
            my_size += 1 + 4;
        }
        if self.height != 0. {
            my_size += 1 + 4;
        }
        if self.width != 0. {
            my_size += 1 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.length != 0. {
            os.write_float(1, self.length)?;
        }
        if self.height != 0. {
            os.write_float(2, self.height)?;
        }
        if self.width != 0. {
            os.write_float(3, self.width)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Room_data {
        Room_data::new()
    }

    fn clear(&mut self) {
        self.length = 0.;
        self.height = 0.;
        self.width = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Room_data {
        static instance: Room_data = Room_data {
            length: 0.,
            height: 0.,
            width: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Room_data {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("room_data").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Room_data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Room_data {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:RUSTUNITYAUDIO.scene_data)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Scene_data {
    // message fields
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.scene_data.room)
    pub room: ::protobuf::MessageField<Room_data>,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.scene_data.sources)
    pub sources: ::protobuf::MessageField<Sources>,
    // @@protoc_insertion_point(field:RUSTUNITYAUDIO.scene_data.listener)
    pub listener: ::protobuf::MessageField<Listener>,
    // special fields
    // @@protoc_insertion_point(special_field:RUSTUNITYAUDIO.scene_data.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Scene_data {
    fn default() -> &'a Scene_data {
        <Scene_data as ::protobuf::Message>::default_instance()
    }
}

impl Scene_data {
    pub fn new() -> Scene_data {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Room_data>(
            "room",
            |m: &Scene_data| { &m.room },
            |m: &mut Scene_data| { &mut m.room },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Sources>(
            "sources",
            |m: &Scene_data| { &m.sources },
            |m: &mut Scene_data| { &mut m.sources },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Listener>(
            "listener",
            |m: &Scene_data| { &m.listener },
            |m: &mut Scene_data| { &mut m.listener },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Scene_data>(
            "scene_data",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Scene_data {
    const NAME: &'static str = "scene_data";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.room)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sources)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.listener)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.room.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.sources.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.listener.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.room.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.sources.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.listener.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Scene_data {
        Scene_data::new()
    }

    fn clear(&mut self) {
        self.room.clear();
        self.sources.clear();
        self.listener.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Scene_data {
        static instance: Scene_data = Scene_data {
            room: ::protobuf::MessageField::none(),
            sources: ::protobuf::MessageField::none(),
            listener: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Scene_data {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("scene_data").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Scene_data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Scene_data {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1baudioSceneHandlerData.proto\x12\x0eRUSTUNITYAUDIO\"0\n\x04vec3\x12\
    \x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\
    \x02R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x02R\x01z\">\n\x04vec4\x12\
    \x0c\n\x01x\x18\x01\x20\x01(\x02R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\
    \x02R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x02R\x01z\x12\x0c\n\x01w\x18\
    \x04\x20\x01(\x02R\x01w\"u\n\ttransform\x120\n\x08position\x18\x01\x20\
    \x01(\x0b2\x14.RUSTUNITYAUDIO.vec3R\x08position\x126\n\x0borientation\
    \x18\x02\x20\x01(\x0b2\x14.RUSTUNITYAUDIO.vec4R\x0borientation\"C\n\x08l\
    istener\x127\n\ttransform\x18\x01\x20\x01(\x0b2\x19.RUSTUNITYAUDIO.trans\
    formR\ttransform\"[\n\x10source_transform\x12\x0e\n\x02id\x18\x20\x20\
    \x01(\rR\x02id\x127\n\ttransform\x18\x02\x20\x01(\x0b2\x19.RUSTUNITYAUDI\
    O.transformR\ttransform\"D\n\x07sources\x129\n\ntransforms\x18\x01\x20\
    \x03(\x0b2\x19.RUSTUNITYAUDIO.transformR\ntransforms\"Q\n\troom_data\x12\
    \x16\n\x06length\x18\x01\x20\x01(\x02R\x06length\x12\x16\n\x06height\x18\
    \x02\x20\x01(\x02R\x06height\x12\x14\n\x05width\x18\x03\x20\x01(\x02R\
    \x05width\"\xa4\x01\n\nscene_data\x12-\n\x04room\x18\x01\x20\x01(\x0b2\
    \x19.RUSTUNITYAUDIO.room_dataR\x04room\x121\n\x07sources\x18\x02\x20\x01\
    (\x0b2\x17.RUSTUNITYAUDIO.sourcesR\x07sources\x124\n\x08listener\x18\x03\
    \x20\x01(\x0b2\x18.RUSTUNITYAUDIO.listenerR\x08listenerb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Vec3::generated_message_descriptor_data());
            messages.push(Vec4::generated_message_descriptor_data());
            messages.push(Transform::generated_message_descriptor_data());
            messages.push(Listener::generated_message_descriptor_data());
            messages.push(Source_transform::generated_message_descriptor_data());
            messages.push(Sources::generated_message_descriptor_data());
            messages.push(Room_data::generated_message_descriptor_data());
            messages.push(Scene_data::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
